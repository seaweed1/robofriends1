{"version":3,"sources":["components/Card.js","components/Cardlist.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","Cardlist","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","target","value","fetch","then","response","json","users","filteredRobots","filter","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"yRAeeA,EAbH,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,KAAKC,EAAY,EAAZA,MAAMC,EAAM,EAANA,GAExB,OAEC,yBAAKC,UAAY,uDAChB,yBAAKC,IAAK,UAAUC,IAAG,+BAA0BH,EAA1B,cACvB,6BACC,4BAAKF,GACL,2BAAIC,MCeOK,EAvBE,SAAC,GAAY,IAAXC,EAAU,EAAVA,OAElB,OACM,6BAEFA,EAAOC,KAAI,SAACC,EAAKC,GAGhB,OAED,kBAAC,EAAD,CACEC,IAAOD,EACPR,GAAMK,EAAOG,GAAGR,GACnBF,KAAOO,EAAOG,GAAGV,KACjBC,MAAOM,EAAOG,GAAGT,aCDNW,EAbE,SAAC,GAA8B,EAA7BC,YAA8B,IAAlBC,EAAiB,EAAjBA,aAE9B,OACC,yBAAKX,UAAU,OACf,2BACEA,UAAY,mCACZY,KAAK,SACLC,YAAa,mBACbC,SAAUH,MCACI,EARA,SAACC,GAEf,OACC,yBAAKC,MAAO,CAACC,UAAW,SAASC,OAAQ,kBAAkBC,OAAO,UACjEJ,EAAMK,WCYMC,E,kDAfd,WAAYN,GAAO,IAAD,8BACjB,cAAMA,IACDO,MAAM,CACRC,UAAS,GAHK,E,8DAKAC,EAAMC,GACvBC,KAAKC,SAAS,CAAEJ,UAAU,M,+BAG1B,OAAIG,KAAKJ,MAAMC,SACP,uDAEDG,KAAKX,MAAMK,a,GAbOQ,aC8CXC,G,wDAvCf,aAAc,IAAD,8BACZ,gBAaDC,eAAgB,SAACC,GAChB,EAAKJ,SAAS,CAAClB,YAAYsB,EAAMC,OAAOC,SAbxC,EAAKX,MAAM,CACVnB,OAAQ,GACRM,YAAY,IAJD,E,gEAOQ,IAAD,OAClByB,MAAM,8CACJC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UACxBF,MAAK,SAAAG,GAAQ,EAAKX,SAAS,CAACxB,OAAOmC,S,+BAS9B,IAAD,EACqBZ,KAAKJ,MAA1BnB,EADA,EACAA,OAAOM,EADP,EACOA,YACR8B,EAAiBpC,EAAOqC,QAAO,SAAArC,GACpC,OAAOA,EAAOP,KAAK6C,cAAcC,SAASjC,EAAYgC,kBAEvD,OAAOtC,EAAOwC,OAGZ,yBAAK5C,UAAW,MACf,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWW,aAAcgB,KAAKI,iBAC7B,kBAAC,EAAD,KACA,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAU3B,OAASoC,OAPtB,2C,GA1BeX,cCIEgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAEL,kBAAC,EAAD,MAGFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpB,MAAK,SAAAqB,GACJA,EAAaC,gBAEdC,OAAM,SAAAlC,GACLmC,QAAQnC,MAAMA,EAAMoC,c","file":"static/js/main.c4265229.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Card =({name,email,id})=>{\n\n\treturn(\n\n\t\t<div className = \"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n\t\t\t<img alt= \"robots \" src={`https://robohash.org/${id}?200x200`}/>\n\t\t\t<div>\n\t\t\t\t<h2>{name}</h2>\n\t\t\t\t<p>{email}</p>\n\t\t\t</div>\n\t\t</div>\n\t\t);\n}\nexport default Card;","import React from 'react';\nimport Card from \"./Card\"\nconst Cardlist = ({robots})=>{\n\t\n\treturn( \n       <div>\n\t     {\n\t\t   robots.map((user,i)=>{\n\t\t  \n\t\t   \n\t\t    return  (\n\t\t\t\n\t\t\t  <Card\n\t\t\t    key = {i} \n\t\t\t    id = {robots[i].id} \n\t\t\t\tname ={robots[i].name} \n\t\t\t\temail={robots[i].email}\n\t\t\t\t/>\n\t\t\t  );\n\t       })\n\t      }\n\t\t</div>\n\n\t\t\t);\n}\nexport default Cardlist;","import React from \"react\";\n\nconst SearchBox =({searchfield,searchChange})=> {\n\n\treturn(\n\t\t<div className=\"pa2\">\n\t\t<input \n\t\t\t className = \"pa3 ba b--green bg-lightest-blue\"\n\t\t\t type=\"search\" \n\t\t\t placeholder= 'search robots   '\n\t\t\t onChange={searchChange}\n\t\t />\n\t\t</div>\n\t\t);\n}\nexport default SearchBox;\n","import React from \"react\";\n\nconst Scroll = (props)=>{\n\n\treturn (\n\t <div style={{overflowY: \"scroll\",border: \"1px solid black\",height:\"600px\"}}>\n\t\t{props.children}\n\t </div>\n   );\n};\nexport default Scroll;","import React, {Component} from \"react\";\n\nclass ErrorBoundry extends Component{\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.state={\n\t    hasError:false}\n}\n\tcomponentDidCatch(error,info){\n\t\tthis.setState({ hasError: true})\n\t}\n\trender(){\n\t\tif (this.state.hasError){\n\t\t\treturn <h1>Ooooops. Thats not good</h1>\n\t\t}\n\t\treturn this.props.children\n\t}\n}\nexport default ErrorBoundry;\n","import React,{Component} from \"react\";\nimport Cardlist from \"../components/Cardlist\";\nimport SearchBox from \"../components/SearchBox\";\nimport Scroll from \"../components/Scroll\";\nimport ErrorBoundry from \"../components/ErrorBoundry\";\nimport \"./App.css\";\n\n\nclass App extends Component{\n\tconstructor(){\n\t\tsuper()\n\t\tthis.state={\n\t\t\trobots: [],\n\t\t\tsearchfield:\"\"\n\t}\n }\n \tcomponentDidMount(){\n \t\tfetch('https://jsonplaceholder.typicode.com/users')\n \t\t\t.then(response=>response.json())\n \t\t\t.then(users=>{this.setState({robots:users})});\n \t}\n\n\n\tonSearchChange =(event)=>{\n\t\tthis.setState({searchfield:event.target.value})\n\t\n\t\t\n\t}\n\trender(){\n\t\tconst {robots,searchfield}= this.state;\n\t\tconst filteredRobots = robots.filter(robots=>{\n\t\t\treturn robots.name.toLowerCase().includes(searchfield.toLowerCase());\n\t})\n\t\treturn!robots.length?\n\t\t <h1>Loading</h1>:\n          (\n\t\t\t\t<div className ='tc'>\n\t\t\t\t\t<h1 className=\"f2\">RoboFriends</h1>\n\t\t\t\t\t<SearchBox searchChange={this.onSearchChange}/>\n\t\t\t\t\t <Scroll>\n\t\t\t\t\t <ErrorBoundry>\n\t\t\t\t\t\t<Cardlist robots ={filteredRobots}/>\n\t\t\t\t\t </ErrorBoundry>\n\t\t\t\t\t</Scroll>\n\t\t\t\t</div>\n\t\t);\n   \n  }\n}export default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport  App from \"./containers/App\";\nimport * as serviceWorker from './serviceWorker';\nimport \"./tachyons.css\";\n\nReactDOM.render(\n  \n\t\t\t\t<App/>\n          \n  \n ,document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}